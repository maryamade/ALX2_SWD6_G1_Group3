{
	"info": {
		"_postman_id": "734e6814-e21d-4f8c-b21b-b57ab3ef059c",
		"name": "Simple Books API DEPI Final",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42561832",
		"_collection_link": "https://bestteam-8200.postman.co/workspace/BestTeam-Workspace~2bd6cee9-e64a-477f-86b6-ace53f8cd243/collection/42561832-734e6814-e21d-4f8c-b21b-b57ab3ef059c?action=share&source=collection_link&creator=42561832"
	},
	"item": [
		{
			"name": "API status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"// Check the response status code and execute the appropriate test\r",
							"if (pm.response.code === 200) {\r",
							"    pm.test(\"Api Status Is Ok - Status code is \" + pm.response.code, function () {\r",
							"        pm.expect(pm.response.code).to.equal(200);\r",
							"    });\r",
							"} else {\r",
							"    pm.test(\"Unexpected status code\", function () {\r",
							"        pm.expect(pm.response.code).to.equal(200, \"Unexpected status code: \" + pm.response.code);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/status",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "List of books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"\r",
							"// Check the response status code and execute the appropriate test\r",
							"if (pm.response.code === 200) {\r",
							"    pm.test(\"List of books is ok, Status code is 200\", function () {\r",
							"        pm.expect(pm.response.code).to.equal(200);\r",
							"\r",
							"pm.test(\"There are 6 books\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"6\");\r",
							"});\r",
							"    });\r",
							"} \r",
							"else {\r",
							"    pm.test(\"Unexpected status code\", function () {\r",
							"        pm.expect([201, 409]).to.include(pm.response.code);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/books",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "non-fiction",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a single book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check the response status code and execute the appropriate test\r",
							"if (pm.response.code === 200) {\r",
							"    pm.test(\"Single book is ok, Status code is 200\", function () {\r",
							"        pm.expect(pm.response.code).to.equal(200);\r",
							"    });\r",
							"}else {\r",
							"    pm.test(\"Unexpected status code\", function () {\r",
							"        pm.expect([201, 409]).to.include(pm.response.code);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/books/:bookId",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"books",
						":bookId"
					],
					"variable": [
						{
							"key": "bookId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Client",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check the response status code and execute the appropriate test\r",
							"\r",
							"if (pm.response.code === 201) {\r",
							"    pm.test(\"Account created successfully - Status code is 201\", function () {\r",
							"        pm.expect(pm.response.code).to.equal(201);\r",
							"    });\r",
							"\r",
							"   // Save the accessToken to the collection variable \"TokenBestTeam\"\r",
							"const responseJson = pm.response.json();\r",
							"if (responseJson.accessToken) {\r",
							"    pm.collectionVariables.set(\"TokenBestTeam\", responseJson.accessToken);\r",
							"    console.log(\"accessToken saved to collection variable 'TokenBestTeam':\", responseJson.accessToken);\r",
							"} else {\r",
							"    console.warn(\"accessToken not found in the response.\");\r",
							"}\r",
							"    \r",
							"} else if (pm.response.code === 409) {\r",
							"    pm.test(\"Account already registered - Status code is 409\", function () {\r",
							"        pm.expect(pm.response.code).to.not.equal(409);\r",
							"    });\r",
							"} else if (pm.response.code === 400) {\r",
							"    pm.test(\"Invalid or missing client email - Status code is 400\", function () {\r",
							"        pm.expect(pm.response.code).to.not.equal(400);\r",
							"    });\r",
							"} else if (pm.response.code === 403) {\r",
							"    pm.test(\"Please check your permissions - Status code is 403 Forbidden\", function () {\r",
							"        pm.expect(pm.response.code).to.not.equal(403);\r",
							"    });\r",
							"} else {\r",
							"    pm.test(\"Unexpected status code\", function () {\r",
							"        pm.expect([201, 409]).to.include(pm.response.code);\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate random clientName\r",
							"const randomString = Math.random().toString(36).substring(2, 8);\r",
							"const clientName = `BestTeam${randomString}`;\r",
							"\r",
							"// Generate random clientEmail\r",
							"const clientEmail = `${clientName}@example.com`;\r",
							"\r",
							"// Store in collection variables\r",
							"pm.collectionVariables.set(\"clientName\", clientName);\r",
							"pm.collectionVariables.set(\"clientEmail\", clientEmail);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"clientName\": \"{{clientName}}\",\r\n   \"clientEmail\": \"{{clientEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api-clients",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Submit order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 201) {\r",
							"    pm.test(\"New Order Has been Submit - Status code is 201\", function () {\r",
							"        pm.expect(pm.response.code).to.equal(201);\r",
							"        console.log(\"New Order Has been Submit.\");\r",
							"    });\r",
							"\r",
							"    // Save the accessToken to the collection variable \"TokenBestTeam\"\r",
							"    const responseJson = pm.response.json();\r",
							"    if (responseJson.orderId) {\r",
							"        pm.collectionVariables.set(\"orderIdOk\", responseJson.orderId);\r",
							"        console.log(\"accessToken saved to collection variable 'orderIdOk':\", responseJson.orderId);\r",
							"    } else {\r",
							"        console.warn(\"accessToken not found in the response.\");\r",
							"    }\r",
							"} else if (pm.response.code === 401) {\r",
							"    pm.test(\"Please Register New account and update the token - Status code is 401 Unauthorized\", function () {\r",
							"        pm.expect(pm.response.code).to.not.equal(401);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TokenBestTeam}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 1,\r\n  \"customerName\": \"ok\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/orders",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 404) {\r",
							"    pm.test(`Error, No Orders founds - Status code is 404`, function () {\r",
							"       pm.expect(pm.response.code).to.not.equal(404);\r",
							"    });\r",
							"} else if (pm.response.code === 200) {\r",
							"    pm.test(`Get All Order Success, Status code is 200`, function () {\r",
							"        pm.expect(pm.response.code).to.equal(200);\r",
							"    });\r",
							"    \r",
							"} else if (pm.response.code === 401) {\r",
							"    pm.test(\"Please Register New account and update the token - Status code is 401 Unauthorized\", function () {\r",
							"       pm.expect(pm.response.code).to.not.equal(401);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Unexpected status code\", function () {\r",
							"        pm.expect([200, 404]).to.include(pm.response.code);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TokenBestTeam}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/orders",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check the response status code and execute the appropriate test\r",
							"const orderId = pm.variables.get(\"orderIdOk\");\r",
							"if (pm.response.code === 404) {\r",
							"    pm.test(`Error, No Order found With this ID: ${orderId} - Status code is 404`, function () {\r",
							"       pm.expect(pm.response.code).to.not.equal(404);\r",
							"    });\r",
							"} else if (pm.response.code === 200) {\r",
							"    pm.test(`Order with your required id ${orderId} has been found - Status code is 200`, function () {\r",
							"        pm.expect(pm.response.code).to.equal(200);\r",
							"    });\r",
							"    \r",
							"} else if (pm.response.code === 401) {\r",
							"    pm.test(\"Please Register New account and update the token - Status code is 401 Unauthorized\", function () {\r",
							"       pm.expect(pm.response.code).to.not.equal(401);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Unexpected status code\", function () {\r",
							"        pm.expect([200, 404]).to.include(pm.response.code);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TokenBestTeam}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/orders/:orderId",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderIdOk}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const orderId = pm.variables.get(\"orderIdOk\");\r",
							"\r",
							"if (pm.response.code === 404) {\r",
							"    pm.test(`Error, No Order With ID: ${orderId} to update - Status code is 404`, function () {\r",
							"        pm.expect(pm.response.code).to.not.equal(404);\r",
							"    });\r",
							"} else if (pm.response.code === 204) {\r",
							"    pm.test(`Order ${orderId} customerName has been updated - Status code is 204`, function () {\r",
							"        pm.expect(pm.response.code).to.equal(204);\r",
							"    });\r",
							"    \r",
							"} else if (pm.response.code === 401) {\r",
							"    pm.test(\"Please Register New account and update the token - Status code is 401 Unauthorized\", function () {\r",
							"       pm.expect(pm.response.code).to.not.equal(401);\r",
							"    });\r",
							"\r",
							"}else if (pm.response.code === 403) {\r",
							"    pm.test(\"Please check your permissions - Status code is 403 Forbidden\", function () {\r",
							"        pm.expect(pm.response.code).to.not.equal(403);\r",
							"    });\r",
							"} else {\r",
							"    pm.test(\"Unexpected status code\", function () {\r",
							"        pm.expect([200, 404]).to.include(pm.response.code);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TokenBestTeam}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\": \"DEPI3\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/orders/:orderId",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderIdOk}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check the response status code and execute the appropriate test\r",
							"\r",
							"const orderId = pm.variables.get(\"orderIdOk\");\r",
							"\r",
							"\r",
							"if (pm.response.code === 404) {\r",
							"    pm.test(`Error, No Orders With this ID: ${orderId} to delete - Status code is 404`, function () {\r",
							"    pm.expect(pm.response.code).to.not.equal(404);\r",
							"    });\r",
							"} else if (pm.response.code === 204) {\r",
							"    pm.test(`You Required Order has been deleted sucessfully - Status code is 204`, function () {\r",
							"        pm.expect(pm.response.code).to.equal(204);\r",
							"    });\r",
							"    \r",
							"} else if (pm.response.code === 401) {\r",
							"    pm.test(\"Please Register New account and update the token - Status code is 401 Unauthorized\", function () {\r",
							"       pm.expect(pm.response.code).to.not.equal(401);\r",
							"    });\r",
							"\r",
							"}else if (pm.response.code === 403) {\r",
							"    pm.test(\"Please check your permissions - Status code is 403 Forbidden\", function () {\r",
							"        pm.expect(pm.response.code).to.not.equal(403);\r",
							"    });\r",
							"} else {\r",
							"    pm.test(\"Unexpected status code\", function () {\r",
							"        pm.expect([200, 404]).to.include(pm.response.code);\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TokenBestTeam}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/orders/:orderId",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderIdOk}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://simple-books-api.glitch.me",
			"type": "default"
		},
		{
			"key": "TokenBestTeam",
			"value": "",
			"type": "string"
		},
		{
			"key": "orderIdOk",
			"value": "",
			"type": "default"
		},
		{
			"key": "clientName",
			"value": "BestTeam25",
			"type": "string"
		},
		{
			"key": "clientEmail",
			"value": "BestTeam25@example.com",
			"type": "string"
		}
	]
}